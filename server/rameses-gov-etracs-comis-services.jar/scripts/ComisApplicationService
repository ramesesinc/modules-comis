import com.rameses.annotations.*
import com.rameses.services.extended.*

class ComisApplicationService {
    @Env 
    def env;
    
    @Service('DateService')
    def dtSvc;

    @Service('SequenceService')
    def seqSvc;

    @Service('ComisApplicationRuleService')
    def ruleSvc;

    @Service("WorkflowTaskService")
	def wfSvc;

    @DataContext('application')
    def em_application;

    @DataContext('relation')
    def em_relation;

    @DataContext('deceased')
    def em_deceased;

    @DataContext('cemetery_resource')
    def em_cem_resource;

    @DataContext('payment')
    def em_payment;

    @DataContext('permit')
    def em_permit;

    
    def STATE_DRAFT = 'DRAFT';
    def STATE_FORPAYMENT = 'FORPAYMENT';
    def STATE_FORRELEASE = 'FORRELEASE';
    def STATE_ACTIVE = 'ACTIVE';
    def STATE_EXPIRED = 'EXPIRED';
    def STATE_RENEWED = 'RENEWED';

    @ProxyMethod
    public def getRelations() {
        return em_relation.find([state: 'ACTIVE']).orderBy('title').list();
    }

    @ProxyMethod
    public def create() {
        def pdate = dtSvc.parseCurrentDate();
        def app = [:];
        app.state = 'DRAFT';
        app.online = true;
        app.apptype = 'NEW';
        app.dtapplied = pdate.date;
        app.appyear = pdate.year;
        app.renewable = true;
        app.leaseduration = 0;
        app.amount = 0;
        app.amtpaid = 0;
        app.balance = 0;
        app.lessor = [:];
        app.lessee = [:];
        app.deceased = createDeceased(app);
        app = em_application.create(app);
        startWorkflow(app);
        return app;
    }

    @ProxyMethod
    public def approve(entity) {
        def old = em_application.read(entity);

        if (old.state != STATE_DRAFT) 
        throw new Exception('Unable to approve application. Only draft application is allowed.');

        if (old.online == 1 || app.online == true) {
            entity.appno = getNextSeries('BURIAL-PERMIT-APP')
            entity.dtapproved = dtSvc.serverDate;
            entity.state = STATE_FORPAYMENT;
        } else {
            entity.state = STATE_ACTIVE;
        }
        em_application.update(entity);
        em_cem_resource.find([objid: old.resourceinfo.parentid]).update([currentappid: entity.objid]);
        return entity;
    }

    @ProxyMethod
    public def release(entity) {
        def old = em_application.read(entity);

        if (old.state != STATE_FORRELEASE) 
        throw new Exception('Unable to release application. Only for release application is allowed.');

        entity.state = STATE_ACTIVE;
        em_application.find([objid: entity.objid]).update([state: entity.state]);
        return entity;
    }

    @ProxyMethod
    public def postPayment(receipt) {
        em_application.find([objid: receipt.refid]).update([state: STATE_FORRELEASE, amtpaid: receipt.amount]);

        def wf = [:];
		wf.processname = 'application';
		wf.action = "post-payment";
		wf.refid = receipt.refid;
		wfSvc.signal(wf);
        return receipt;
    }

    void startWorkflow(app) {
        def task = [:];
        task.processname = 'application';
        task.refid = app.objid;
        task.startdate = dtSvc.getServerDate();
        task.info = app;
        task.assignee = [objid:env.USERID, name:env.FULLNAME];		
        wfSvc.start(task);			
    }

    def getNextSeries(prefix) {
        def cy = dtSvc.serverYear;
        def keyid = prefix + '-' + cy;
        def series = seqSvc.getNextFormattedSeries(keyid);
        return cy + '' + series;
    }

    def createDeceased(app) {
        def deceased = [:];
        deceased.state = 'DRAFT';
        deceased.nationality = 'FILIPINO';
        return em_deceased.create(deceased);
    }

}