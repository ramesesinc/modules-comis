import com.rameses.annotations.*;
import com.rameses.services.extended.*;

public class ComisApplicationReceiptService  {
    @Service('DateService')
    def dtSvc;

    @DataContext('application')
    def em_app;

    @DataContext('application_fee')
    def em_app_fee;

    @DataContext('payment')
    def em_payment;

    @DataContext('payment_item')
    def em_payment_item;

    @Service("WorkflowTaskService")
	def wfSvc;

    

    
    @ProxyMethod
    public def getFees(application) {
        def fees = em_app_fee.find([parentid: application.objid])
                        .where("amtpaid < amount")
                        .list();
        def rctitems = [];

        fees.each{ 
            rctitems << [
                item: it.item.item,
                amount: it.amount
            ]
            if (it.surcharge > 0) {
                rctitems << [
                    item: it.surchargeacct.item,
                    amount: it.surcharge,
                ]
            }
            if (it.penalty > 0) {
                rctitems << [
                    item: it.penaltyacct.item,
                    amount: it.penalty,
                ]
            }
        }
        return rctitems;
    }

    @ProxyMethod
    public def open(receipt) {
        receipt.application = [:];
        def pmt = em_payment.select('appid').find([refid: receipt.objid]).first();
        if (pmt) {
            receipt.application = em_app.find([objid: pmt.appid]).first();
        }
    }

    @ProxyMethod
    public def postPayment(receipt) {
        def app = receipt.application;

        em_app.find([objid: app.objid]).update([state: 'FORRELEASE', amtpaid: receipt.amount]);
        
        def pmt = [:]
        pmt.appid = app.objid;
        pmt.refid = receipt.objid;
        pmt.refno = receipt.receiptno;
        pmt.reftype = 'RECEIPT';
        pmt.refdate = receipt.receiptdate;
        pmt.discount = 0.0;
        pmt.amount = receipt.amount;
        pmt.voided = 0;
        pmt.txnmode = 'ONLINE';
        pmt.txndate = dtSvc.serverDate;
        pmt = em_payment.create(pmt);

        def fees = em_app_fee.find([parentid: app.objid]).list();
        fees.each{ fee -> 
            em_app_fee.find([objid: fee.objid]).update([amtpaid: '{amount}', surchargepaid: '{surcharge}', penaltypaid: '{penalty}']);

            def pmtitem = [:];
            pmtitem.parentid = pmt.objid;
            pmtitem.refid = fee.objid;
            pmtitem.reftype = 'FEE';
            pmtitem.amount = receipt.amount;
            pmtitem.discount = fee.discount ? fee.discount : 0.0;
            em_payment_item.create(pmtitem);
        }

        signalWf(app, 'post-payment');
        return receipt;
    }

    @ProxyMethod
    public void voidPayment(voidreceipt) {
        def receipt = voidreceipt.receipt;
        def pmt = em_payment.find([refid: receipt.objid]).first();
        if (pmt) {
            em_app.find([objid: pmt.appid]).update([state: 'FORPAYMENT', amtpaid: 0]);
            em_app_fee.find([parentid: pmt.appid]).update([amtpaid: 0, surchargepaid: 0, penaltypaid: 0]);
            em_payment.find([objid: pmt.objid]).update([voided: 1]);

            signalWf([objid: pmt.appid], 'void-payment');
        }
    }

    void signalWf(app, action) {
        def taskid = em_app.select('taskid').find([objid: app.objid]).val();
        def wf = [:];
        wf.taskid = taskid;
        wf.processname = 'application';
		wf.action = action;
		wf.refid = app.objid;
		wfSvc.signal(wf);
    }
}