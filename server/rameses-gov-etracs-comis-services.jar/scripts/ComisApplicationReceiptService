import com.rameses.annotations.*;
import com.rameses.services.extended.*;

public class ComisApplicationReceiptService  {
    @Service('DateService')
    def dtSvc;

    @DataContext('application')
    def em_app;

    @DataContext('application_fee')
    def em_app_fee;

    @DataContext('payment')
    def em_payment;

    @DataContext('payment_item')
    def em_payment_item;

    

    
    @ProxyMethod
    public def getFees(application) {
        def fees = em_app_fee.find([parentid: application.objid])
                        .where("amtpaid < amount")
                        .list();

        fees.each{ 
            it.feeid = it.objid;
            it.objid = null;
            it.item = it.item.item;
        }
        return fees;
    }

    @ProxyMethod
    public def open(receipt) {
        receipt.application = [:];
        def pmt = em_payment.select('appid').find([refid: receipt.objid]).first();
        if (pmt) {
            receipt.application = em_app.find([objid: pmt.appid]).first();
        }
    }

    @ProxyMethod
    public def postPayment(receipt) {
        def app = receipt.application;
        def fees = receipt.items;

        em_app.find([objid: app.objid])
              .update([state: 'FORRELEASE', amtpaid: '{amtpaid + :amount}'], [amount: receipt.amount]);
        
        def pmt = [:]
        pmt.appid = app.objid;
        pmt.refid = receipt.objid;
        pmt.refno = receipt.receiptno;
        pmt.reftype = 'RECEIPT';
        pmt.refdate = receipt.receiptdate;
        pmt.discount = 0.0;
        pmt.amount = receipt.amount;
        pmt.voided = 0;
        pmt.txnmode = 'ONLINE';
        pmt.txndate = dtSvc.serverDate;
        pmt = em_payment.create(pmt);

        fees.each{ fee -> 
            em_app_fee.find([objid: fee.feeid]).update([amtpaid: fee.amount]);

            def pmtitem = [:];
            pmtitem.parentid = pmt.objid;
            pmtitem.refid = fee.feeid;
            pmtitem.reftype = 'FEE';
            pmtitem.amount = fee.amount;
            pmtitem.discount = fee.discount ? fee.discount : 0.0;
            em_payment_item.create(pmtitem);
        }
    }

    @ProxyMethod
    public void voidPayment(voidreceipt) {
        def receipt = voidreceipt.receipt;
        def pmt = em_payment.find([refid: receipt.objid]).first();
        if (pmt) {
            em_app.find([objid: pmt.appid])
              .update([state: 'FORPAYMENT', amtpaid: '{amtpaid - :amount}'], [amount: receipt.amount]);
        
            em_payment.find([objid: pmt.objid]).update([voided: 1]);
            em_payment_item.find([parentid: pmt.objid]).list().each{pmtitem ->
                em_app_fee.debug = true;
                em_app_fee.find([objid: pmtitem.refid])
                          .update([amtpaid: '{amtpaid - :amount}'], [amount: pmtitem.amount]);
            }
        }
    }
}