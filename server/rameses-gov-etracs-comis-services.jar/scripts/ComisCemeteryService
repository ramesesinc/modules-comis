import com.rameses.annotations.*
import com.rameses.services.extended.*

class ComisCemeteryService {
    @DataContext('cemetery')
    def em_cemetery;

    @DataContext('cemetery_section')
    def em_section;

    @DataContext('cemetery_section_resource')
    def em_section_resource;

    @DataContext('cemetery_section_resource_info')
    def em_section_resource_info;

    @DataContext('vw_cemetery_section_resource')
    def vw_section_resource;


    def DRAFT_STATE = 'DRAFT';
    def ACTIVE_STATE = 'ACTIVE';
    def INACTIVE_STATE = 'INACTIVE';

    @ProxyMethod
    public def getSections(entity) {
        return em_section.find([parentid: entity.objid]).orderBy('code').list();
    }

    @ProxyMethod
    public def approve(cemetery) {
        def old = em_cemetery.read(cemetery);
        if (!old) 
        throw new Exception('Cemetery does not exist or has already been deleted');

        if (INACTIVE_STATE.equalsIgnoreCase(old.state)) 
        throw new Exception('Cemetery has already been deactivated');
        
        if (DRAFT_STATE.equalsIgnoreCase(old.state)) {
            cemetery.state = ACTIVE_STATE;
            em_cemetery.update(cemetery);
            em_section.find([parentid: cemetery.objid]).update([state: ACTIVE_STATE]);
        }
        return cemetery;
    }
    
	@ProxyMethod
    public def deactivate(cemetery) {
        def old = em_cemetery.read(cemetery);
        if (!old) 
        throw new Exception('Cemetery does not exist or has already been deleted');

        cemetery.state = INACTIVE_STATE;
        em_cemetery.update(cemetery);
        em_section.find([parentid: cemetery.objid]).update([state: INACTIVE_STATE]);
        return cemetery;
    }


	@ProxyMethod
    public def approveSection(section) {
        def old = em_section.read(section);
        if (!old) 
        throw new Exception('Section does not exist or has already been deleted');

        if (INACTIVE_STATE.equalsIgnoreCase(old.state)) 
        throw new Exception('Section has already been deactivated');
        
        if (DRAFT_STATE.equalsIgnoreCase(old.state)) {
            section.state = ACTIVE_STATE;
            em_section.update(section);
        }
        return section;
    }
    
	@ProxyMethod
    public def deactivateSection(section) {
        def old = em_section.read(section);
        if (!old) 
        throw new Exception('Section does not exist or has already been deleted');

        section.state = INACTIVE_STATE;
        em_section.update(section);
        return section;
    }

    @ProxyMethod
    public def deleteSection(section) {
        em_section.delete(section);
        return section;
    }


    @ProxyMethod
    public def getSectionResources(section) {
        return vw_section_resource.find([parentid: section.objid]).orderBy('code').list();
    }

	@ProxyMethod
    public def approveResource(resource) {
        def old = vw_section_resource.find([objid: resource.objid]).first();
        if (!old) 
        throw new Exception('Resource does not exist or has already been deleted');

        if (INACTIVE_STATE.equalsIgnoreCase(old.state)) 
        throw new Exception('Resource has already been deactivated');
        
        if (DRAFT_STATE.equalsIgnoreCase(old.state)) {
            resource.state = ACTIVE_STATE;
            em_section_resource_info.find([objid: resource.currentinfoid]).update([state: resource.state])
        }
        return resource;
    }
    
	@ProxyMethod
    public def deactivateResource(resource) {
        def old = vw_section_resource.find([objid: resource.objid]).first();
        if (!old) 
        throw new Exception('Resource does not exist or has already been deleted');

        resource.state = INACTIVE_STATE;
        em_section_resource_info.find([objid: resource.currentinfoid]).update([state: resource.state])
        return resource;
    }

    @ProxyMethod
    public def deleteSectionResource(resource) {
        em_section_resource.delete(resource);
        em_section_resource_info.find([objid: resource.currentinfoid]).delete();
        return resource;
    }

}