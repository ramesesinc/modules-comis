import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*

class ComisApplicationInterceptor {
	@Env 
	def env;

	@Service('DateService')
    def dtSvc;
	
	@Service('ComisApplicationService')
	def svc;

	@Service('ComisApplicationRuleService')
	def ruleSvc;

	@Service("WorkflowTaskService")
	def wfSvc;

	@DataContext('application_fee')
	def em_fee;

	@Before(pattern="PersistenceService.update", eval="#{args[0]._schemaname=='application'}") 
	public void beforeUpdate( evt ) {
		def app = evt.args[0];
		if (app.online == true || app.online == 1) {
			ruleSvc.execute(app);
			updateExpiryDate(app);
			em_fee.find([parentid: app.objid]).delete();
		}
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'application' && args[0].taskstate == 'approver'}")
	public void approveApplication(evt) {
		def res = evt.result;
		svc.approve([objid: res.refid]);
	}

	@After(pattern="WorkflowTaskService.signal", eval="#{args[0].processname == 'application' && args[0].taskstate == 'releaser'}")
	public void releaseApplication(evt) {
		def res = evt.result;
		println 'pass '
		svc.release([objid: res.refid]);
	}

	void executeApplicationRule(app) {
		ruleSvc.execute(app);
		updateExpiryDate(app);
		em_fee.find([parentid: app.objid]).delete();
	}

	def updateExpiryDate(app) {
		if (!app.leaseduration || app.leaseduration == 0)
			app.dtexpiry = null;

		if (app.online || app.online == 1) {
			def interval = app.leaseduration+"y";
			app.dtexpiry = dtSvc.add(app.dtapproved, interval);
		}
    }

}