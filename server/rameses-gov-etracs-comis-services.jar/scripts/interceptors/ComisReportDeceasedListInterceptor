import com.rameses.annotations.*
import com.rameses.common.*;
import com.rameses.services.extended.*

class ComisReportDeceasedListInterceptor {
	@Service('DateService')
	def dtSvc;

	@Service('ComisUtil')
	def util;

	@DataContext('deceased')
	def em_deceased;


	@After(pattern="FormReportService.getData", eval="#{args[0].reportid == 'comis_list_of_deceased'}", index=100)
	public void getData(def evt) {
		def params  = evt.args[0].parameters;

		params.query = [period: 'ALL', age: 'ALL'];
		params.query.lgu = params.lgu ? params.lgu : 'ALL';

		params.filters = [];
		params.filters << ' state = :state ';
		params.state = 'APPROVED';
		util.buildStartEndDateFilter(params);
		buildAgeGroupFilter(params);
		
		def where = params.filters.join(' AND ');
		def list = em_deceased.where([where, params]).orderBy('name').list();
		if (list) {
			list.each{
				it.age = toAgeStr(it.age, it.agetype)
			}
			list[0].query = params.query;
		}

		evt.result.data = list;
		
	}

	void buildAgeGroupFilter(params) {
		if (!params.agegroup) return;
		if ('INFANT'.equalsIgnoreCase(params.agegroup.id)) {
			params.filters << ' ageinmon <= 11 ';
			params.query.age = '0 TO 11 MONTHS';
		} else if ('18below'.equalsIgnoreCase(params.agegroup.id)) {
			params.filters << ' ageinmon <= :18below ';
			params['18below'] = 18 * 12;
			params.query.age = '18 YEARS OLD AND BELOW';
		} else if ('60above'.equalsIgnoreCase(params.agegroup.id)) {
			params.filters << ' ageinmon >= :60above ';
			params['60above'] = 60 * 12;
			params.query.age = '60 YEARS OLD AND ABOVE';
		} else if ('range'.equalsIgnoreCase(params.agegroup.id)) {
			params.filters << ' ageinmon >= :agefrom AND ageinmon <= :ageto ';
			params.agefrom = getAgeInMonth(params.agefrom, params.agefromtype);
			params.ageto = getAgeInMonth(params.ageto, params.agetoype);
			params.query.age = 'BETWEEN ' + toAgeStr(params.agefrom, params.agefromtype) + ' AND ' + toAgeStr(params.ageto, params.agetotype);
		} else {
			throw new Exception('agegroup ' + params.agegroup.id + ' is not supported.');
		}
	}

	def getAgeInMonth(age, agetype) {
		if ('DAY'.equalsIgnoreCase(agetype )) {
			return 0;
		} else if ('MONTH'.equalsIgnoreCase(agetype )) {
			return age;
		} else if ('YEAR'.equalsIgnoreCase(agetype )) {
			return age * 12;
		} else {
			throw new Exception('agetype ' + agetype + ' is not supported.');
		}
	}

	def toAgeStr(age, agetype) {
		def str = age+'';
		if (!'YEAR'.equalsIgnoreCase(agetype )) {
			str += ' ' + agetype;

			if (age > 1) {
				str += 's';
			}
		}
		return str.toLowerCase();
	}

	
}